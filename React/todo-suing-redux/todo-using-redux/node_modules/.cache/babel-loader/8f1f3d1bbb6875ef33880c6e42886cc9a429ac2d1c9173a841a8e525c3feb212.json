{"ast":null,"code":"const initialState = {\n  byIds: {},\n  allIds: [],\n  visibilityFilter: \"SHOW_ALL\"\n};\nconst taskReducer = (state = initialState, action) => {\n  switch (action.type) {\n    // In the ADD_TODO case of your reducer, make sure to initialize the completed property to false\n    case \"ADD_TODO\":\n      {\n        const {\n          id,\n          inputData\n        } = action.payload;\n        return {\n          ...state,\n          byIds: {\n            ...state.byIds,\n            [id]: {\n              inputData,\n              completed: false\n            } // Set completed to false initially\n          },\n          allIds: [...state.allIds, id]\n        };\n      }\n\n    // Make sure the id being passed in the toggleTodo action payload corresponds to an existing todo\n    case 'toggleTodo':\n      {\n        const {\n          id\n        } = action.payload;\n        return {\n          ...state,\n          byIds: {\n            ...state.byIds,\n            [id]: {\n              ...state.byIds[id],\n              completed: !state.byIds[id].completed\n            }\n          }\n        };\n      }\n    case 'SET_VISIBILITY_FILTER':\n      {\n        return {\n          ...state,\n          visibilityFilter: action.payload\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport default taskReducer;","map":{"version":3,"names":["initialState","byIds","allIds","visibilityFilter","taskReducer","state","action","type","id","inputData","payload","completed"],"sources":["C:/Users/webmob/Documents/WebMobSoft/todo-suing-redux/todo-using-redux/src/redux/reducer.js"],"sourcesContent":["const initialState = {\r\n  byIds: {},\r\n  allIds: [],\r\n  visibilityFilter: \"SHOW_ALL\" \r\n};\r\n\r\nconst taskReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n// In the ADD_TODO case of your reducer, make sure to initialize the completed property to false\r\ncase \"ADD_TODO\": {\r\n  const { id, inputData } = action.payload;\r\n  return {\r\n    ...state,\r\n    byIds: {\r\n      ...state.byIds,\r\n      [id]: { inputData, completed: false }, // Set completed to false initially\r\n    },\r\n    allIds: [...state.allIds, id],\r\n  };\r\n}\r\n\r\n// Make sure the id being passed in the toggleTodo action payload corresponds to an existing todo\r\ncase 'toggleTodo': {\r\n  const { id } = action.payload;\r\n  return {\r\n    ...state,\r\n    byIds: {\r\n      ...state.byIds,\r\n      [id]: {\r\n        ...state.byIds[id],\r\n        completed: !state.byIds[id].completed,\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\n    \r\n    case 'SET_VISIBILITY_FILTER':{\r\n      return {\r\n        ...state,\r\n        visibilityFilter: action.payload\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default taskReducer;\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC,CAAC;EACTC,MAAM,EAAE,EAAE;EACVC,gBAAgB,EAAE;AACpB,CAAC;AAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACC,IAAI;IACrB;IACA,KAAK,UAAU;MAAE;QACf,MAAM;UAAEC,EAAE;UAAEC;QAAU,CAAC,GAAGH,MAAM,CAACI,OAAO;QACxC,OAAO;UACL,GAAGL,KAAK;UACRJ,KAAK,EAAE;YACL,GAAGI,KAAK,CAACJ,KAAK;YACd,CAACO,EAAE,GAAG;cAAEC,SAAS;cAAEE,SAAS,EAAE;YAAM,CAAC,CAAE;UACzC,CAAC;UACDT,MAAM,EAAE,CAAC,GAAGG,KAAK,CAACH,MAAM,EAAEM,EAAE;QAC9B,CAAC;MACH;;IAEA;IACA,KAAK,YAAY;MAAE;QACjB,MAAM;UAAEA;QAAG,CAAC,GAAGF,MAAM,CAACI,OAAO;QAC7B,OAAO;UACL,GAAGL,KAAK;UACRJ,KAAK,EAAE;YACL,GAAGI,KAAK,CAACJ,KAAK;YACd,CAACO,EAAE,GAAG;cACJ,GAAGH,KAAK,CAACJ,KAAK,CAACO,EAAE,CAAC;cAClBG,SAAS,EAAE,CAACN,KAAK,CAACJ,KAAK,CAACO,EAAE,CAAC,CAACG;YAC9B;UACF;QACF,CAAC;MACH;IAGI,KAAK,uBAAuB;MAAC;QAC3B,OAAO;UACL,GAAGN,KAAK;UACRF,gBAAgB,EAAEG,MAAM,CAACI;QAC3B,CAAC;MACH;IACA;MACE,OAAOL,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}